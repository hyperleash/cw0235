#install python and ansible on host before doing any of this
- name: Generate Key on the localhost
  hosts: localhost
  become: yes
  roles:
    - key_generator

- name: Distribute keys to cluster nodes
  hosts: cluster_nodes:client
  become: yes
  roles:
    - key_distributor

- name: prepare disk on cluster nodes
  hosts: cluster_nodes:client
  roles:
    - mount_disk

- name: install and start firewalld
  hosts: cluster_nodes:client:localhost
  become: yes
  tasks:
    - name: Install firewalld
      ansible.builtin.package:
        name: firewalld
        state: present

    - name: Start and enable firewalld service
      ansible.builtin.systemd:
        name: firewalld
        state: started
        enabled: yes


- name: Node exporter installation
  hosts: cluster_nodes:client:localhost
  become: true
  become_user: root
  tasks:
  - name: accept repo GPG key
    ansible.builtin.shell:
      cmd: rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
  - name: Install EPEL
    ansible.builtin.dnf:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
      state: present
  - name: install node-exporter
    ansible.builtin.dnf:
      name: golang-github-prometheus-node-exporter
      state: latest
  - name: Check if node_exporter.service exists
    ansible.builtin.stat:
      path: /etc/systemd/system/node_exporter.service
    register: node_exporter_service

  - name: Create node_exporter.service
    ansible.builtin.copy:
      dest: node_exporter.service
      content: |
        [Unit]
        Description=Node Exporter
        After=network.target
        
        [Service]
        User=root
        Group=root
        Type=simple
        ExecStart=/usr/bin/node_exporter
        
        [Install]
        WantedBy=multi-user.target
      mode: '0644'
    when: not node_exporter_service.stat.exists
  - name: move service file
    ansible.builtin.copy:
      src: node_exporter.service
      dest: /etc/systemd/system/node_exporter.service
      remote_src: yes
      owner: root
      group: root
  - name: start node-exporter
    ansible.builtin.service:
      name: node_exporter
      state: started
      daemon_reload: true
  - name: open port 9100
    ansible.posix.firewalld:
      port: 9100/tcp
      permanent: true
      state: enabled
      zone: public
      immediate: true

- name: Prometheus installation
  hosts: localhost
  become: true
  become_user: root
  tasks:
  - name: accept repo GPG key
    ansible.builtin.shell:
      cmd: rpm --import https://dl.fedoraproject.org/pub/epel/RPM-GPG-KEY-EPEL-9
  - name: Install EPEL
    ansible.builtin.dnf:
      name: https://dl.fedoraproject.org/pub/epel/epel-release-latest-9.noarch.rpm
      state: present
  - name: install prometheus
    ansible.builtin.dnf:
      name: golang-github-prometheus
      state: latest
  - name: install grafana
    ansible.builtin.dnf:
      name: grafana
      state: latest
  - name: change prometheus configuration according to template
    ansible.builtin.template:
      src: prometheus.yml.j2
      dest: /etc/prometheus/prometheus.yml
    vars:
      node_ips: "{{ (groups['cluster_nodes'] + groups['client']) | map('extract', hostvars, ['ansible_default_ipv4', 'address']) | list }}"
  - name: Check if prometheus.service exists
    ansible.builtin.stat:
      path: /etc/systemd/system/prometheus.service
    register: prometheus_service

  - name: Create prometheus.service
    ansible.builtin.copy:
      dest: prometheus.service
      content: |
        [Unit]
        Description=Prometheus Server
        Wants=network-online.target
        After=network-online.target
        
        [Service]
        User=root
        Group=root
        Type=simple
        ExecStart=/usr/bin/prometheus --config.file=/etc/prometheus/prometheus.yml
        Restart=always
        RestartSec=2
        StartLimitInterval=0
        
        [Install]
        WantedBy=multi-user.target
      mode: '0644'
    when: not  prometheus_service.stat.exists
  - name: move service file
    ansible.builtin.copy:
      src:  prometheus.service
      dest: /etc/systemd/system/prometheus.service
      remote_src: yes
      owner: root
      group: root
  - name: Reload systemd manager configuration
    ansible.builtin.systemd:
      daemon_reload: yes
  - name: Start prometheus service
    ansible.builtin.systemd:
      name: prometheus
      state: started

  - name: Enable prometheus service to start at boot
    ansible.builtin.systemd:
      name: prometheus.service
      enabled: yes
  - name: Start Grafana service
    ansible.builtin.systemd:
      name: grafana-server
      state: started

  - name: Enable Grafana service to start at boot
    ansible.builtin.systemd:
      name: grafana-server.service
      enabled: yes

  - name: Check Grafana service status
    ansible.builtin.systemd:
      name: grafana-server
      state: started
    register: grafana_status

  - name: Display Grafana service status
    ansible.builtin.debug:
      var: grafana_status 

- name: install dependencies
  hosts: cluster_nodes:client
  become: yes
  roles:
    - install_dependencies

- name: Download db on the client
  hosts: client
  become: yes
  roles:
    - data

- name: Delete the output files on nodes
  hosts: cluster_nodes:client #48.096250000000005,150.78875
  tasks:
    - name: Delete specified files
      file:
        path: "/home/ec2-user/{{ item }}"
        state: absent
      loop:
        - hhr_parse.out 
        - local_results.txt 

- name: Delete the node results folders on localhost
  hosts: localhost
  tasks:
    - name: Delete folders for each IP in cluster_nodes and client
      file:
        path: "/home/ec2-user/cw0235/{{ hostvars[item]['ansible_default_ipv4']['address'] }}"
        state: absent
      loop: "{{ groups['cluster_nodes'] + groups['client'] }}"
      ignore_errors: yes

- name: Delete the hhsuite archive
  hosts: localhost #48.096250000000005,150.78875
  tasks:
    - name: Delete specified files
      file:
        path: "/home/ec2-user/{{ item }}"
        state: absent
      loop:
        - all_results.txt
        - best_hits.csv
        - stats.csv

- name: Check if pdb70 archive exists
  hosts: client
  tasks:
    - name: Check if pdb70 archive exists
      stat:
        path: /home/ec2-user/data/pdb70/md5sum
        get_checksum: False  #This makes it quicker for large files
        get_md5: False
      register: pdb70

    - name: create a pdb70 folder
      ansible.builtin.file:
        path: /home/ec2-user/data/pdb70
        state: directory
        mode: '0755'
      when: not pdb70.stat.exists

    - name: Unzip pdb70
      ansible.builtin.unarchive:
        src: /home/ec2-user/data/pdb70_from_mmcif_latest.tar.gz
        dest: /home/ec2-user/data/pdb70/
        remote_src: yes
      when: not pdb70.stat.exists

- name: Distribute the file to other clients
  hosts: cluster_nodes
  tasks:
    - name: Check if pdb70 archive exists
      stat:
        path: /home/ec2-user/data/pdb70/pdb70_a3m.ffdata
        get_checksum: False  #This makes it quicker for large files
        get_md5: False
      register: pdb70

    - name: Distribute
      include_role:
        name: data_distributer
      vars:
        src_file: "/home/ec2-user/data/pdb70"
        dest_dir: "/home/ec2-user/data/"
        delegate: "10.0.7.13"
      when: not pdb70.stat.exists

- name: Distribute scripts to other clients
  hosts: cluster_nodes:client
  become: yes
  roles:
    - script_distributer
  vars:
    src_file: "/home/ec2-user/cw0235/scripts"
    dest_dir: "/home/ec2-user/"
  
- name: Distribute full list of experiment ids
  hosts: cluster_nodes:client
  become: yes
  roles:
    - script_distributer
  vars:
    src_file: "/home/ec2-user/cw0235/experiment_ids.txt"
    dest_dir: "/home/ec2-user/scripts/experiment_ids.txt"
  
- name: Dividing work
  hosts: cluster_nodes:client
  become: yes
  roles:
    - divide_work

- name: Calculate line ranges for each node
  hosts: localhost
  tasks:
    - name: Initialize an empty list for line ranges
      set_fact:
        line_ranges: []

    - name: Calculate line ranges
      set_fact:
        line_ranges: "{{ line_ranges + [{'host': item, 'start_line': start_line, 'end_line': end_line if not ansible_loop.last else hostvars[item].line_count}] }}"
      vars:
        start_line: "{{ ((prev_end_line | default(0)) | int) + 1 }}"
        end_line: "{{ (start_line | int) + ((((hostvars[item].ansible_processor_vcpus | int) - 1) * (hostvars[item].line_count | int) / (hostvars[item].total_threads | int)) | round(0, 'floor')) - 1 }}"
        prev_end_line: "{{ line_ranges | map(attribute='end_line') | last }}"
      loop: "{{ groups['cluster_nodes'] + groups['client'] }}"
      loop_control:
        extended: yes
      run_once: true

- name: Distribute line ranges to nodes
  hosts: cluster_nodes:client
  become: yes
  tasks:
    - name: Set line range for each node
      set_fact:
        node_line_start: "{{ host_line_range.start_line }}"
        node_line_end: "{{ host_line_range.end_line }}"
      vars:
        host_line_range: "{{ hostvars['localhost'].line_ranges | selectattr('host', 'equalto', inventory_hostname) | first }}"
    - name: Display line ranges for each node
      debug:
        msg: "Node {{ inventory_hostname }} processes lines from {{ hostvars[inventory_hostname].node_line_start }} to {{ hostvars[inventory_hostname].node_line_end }}"
    - name: Create a file with new ids
      ansible.builtin.shell: "awk 'NR >= {{hostvars[inventory_hostname].node_line_start}} && NR <= {{hostvars[inventory_hostname].node_line_end}}' /home/ec2-user/scripts/experiment_ids.txt > /home/ec2-user/scripts/partial_ids.txt"

- name: Execute a Python script on remote nodes
  hosts: cluster_nodes:client
  tasks:
    - name: Run Python script
      ansible.builtin.command: python3 /home/ec2-user/scripts/pipeline_script.py /home/ec2-user/scripts/uniprotkb_proteome_UP000005640_2023_10_05.fasta /home/ec2-user/scripts/partial_ids.txt
  
- name: Prepare and results master file
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Create file and add header line
      ansible.builtin.copy:
        dest: "/home/ec2-user/cw0235/all_results.txt"
        content: "query_id,best_hit,best_evalue,best_score,score_mean,score_std,score_gmean\n"
        force: no

- name: Fetch files from remote nodes and combine into a master file
  hosts: cluster_nodes:client
  gather_facts: true

  tasks:
    - name: Fetch file from remote node
      ansible.builtin.fetch:
        src: /home/ec2-user/local_results.txt
        dest: /home/ec2-user/cw0235/{{ inventory_hostname }}/
        flat: yes

    - name: Concatenate contents on the control node
      ansible.builtin.shell: "cat /home/ec2-user/cw0235/{{ item }}/local_results.txt >> /home/ec2-user/cw0235/all_results.txt"
      loop: "{{ ansible_play_hosts }}"
      delegate_to: localhost
      run_once: true

#requires pandas on host
- name: Create finale results files
  hosts: localhost
  tasks:
    - name: Run Python script
      ansible.builtin.command: python3 /home/ec2-user/cw0235/process_results.py